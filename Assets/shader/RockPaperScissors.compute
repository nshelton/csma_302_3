#pragma kernel CSMain

RWTexture2D<float4> _source;
RWTexture2D<float4> _destination;

float _width;
float _height;

uint2 wrap(int2 pixel) 
{
    if (pixel.x < 0) {
        pixel.x += _width;
    }
    if (pixel.y < 0) {
        pixel.y += _height;
    }
    if (pixel.x >= _width) {
        pixel.x -= _width;
    }
    if (pixel.y >= _height) {
        pixel.y -= _height;
    }

    return pixel;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 result = _source[id.xy];
    
    bool red = (result[0] > 0.0);
    bool green = (result[1] > 0.0);
    bool blue = (result[2] > 0.0);
    
    int red_neighbors = 0;
    int green_neighbors = 0;
    int blue_neighbors = 0;
    int threshold = 2;


    // count blue neighbors
    // count red and green neighbors also
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            if (dx != 0 || dy != 0) {
                float4 pixel = _source[wrap(id.xy + int2(dx, dy))];
                if (pixel[0] > 0.0) {
                    red_neighbors += 1;
                }
                if (pixel[1] > 0.0) {
                    green_neighbors += 1;
                }
                if (pixel[2] > 0.0) {
                    blue_neighbors += 1;
                }
            }
        }
    }
 
    // Green > Red, Blue > Green, Red > Blue
    // flip if the number of neighbouring cells that beats it is above a threshold. (start with 2)
    if (blue && red_neighbors > threshold) {
        result = float4(1, 0, 0, 1);    //change to red
    }

    if (red && green_neighbors > threshold) {
        result = float4(0, 1, 0, 1);    //change to green
    }

    if (green && blue_neighbors > threshold) {
        result = float4(0, 0, 1, 1);    //change to blue
    }

    _destination[id.xy] = result;
}
